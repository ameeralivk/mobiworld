<%- include("../../views/partials/admin/layout") %>
<link rel="stylesheet" href="\css\admin css\addproduct.css">
<body>

    <div class="modal" id="cropModal" style="display:none; margin-left: 300px;">
        <div class="modal-content" style="max-width:500px; margin:auto;">
          <img id="cropperImage" style="max-width:100%;">
          <button id="cropNextBtn" class="btn btn-primary mt-3">Crop & Next</button>
        </div>
      </div>
    <div class="container">
        <% if (msg) { %>
            <div id="message" class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Failed!</strong> <%= msg %>
            </div>
            <% } %>
    
        <h2 class="mb-4">Add Products</h2>

        <div class="form-container">
            <form id="form" action="/admin/upload" method="post" enctype="multipart/form-data">
                <div class="row">
                    <div class="col-md-4">
                        <!-- <div class="mb-3">
                            <label for="productImage" class="form-label">Card Image:</label>
                            <div class="image-preview" id="imagePreview" onclick="document.getElementById('productImage').click()"></div>
                            <input name="productImage" type="file" class="form-control d-none" id="productImage" multiple>
                        </div> -->
                        <div class="mb-3">
                            <label for="productImage" class="form-label">Card Image:</label>
                            <div class="image-preview d-flex gap-2" id="imagePreview"></div>
                            <input name="productImage" type="file" class="form-control d-none" id="productImage" multiple accept="image/jpeg, image/jpg, image/png">
                          </div>
                        <!-- <input name="recimage" type="file" multiple> -->
                    </div>
                     
                    
                    <div class="col-md-8">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="productName" class="form-label">Product Name:</label>
                                    <input name="productName" type="text" class="form-control" id="productName">
                                    <p id="nameerror" class="error-message" style="display: none" ></p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="productDescription" class="form-label">Product Description:</label>
                                    <input name="productDescription" type="text" class="form-control" id="productDescription">
                                    <p id="descriptionerror" class="error-message" style="display: none" ></p>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="productAmount" class="form-label">Product Amount:</label>
                                    <input name="price" type="number" class="form-control" id="productAmount">
                                    <p id="rateerror" class="error-message" style="display: none" ></p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="stockCount" class="form-label">Stock Count:</label>
                                    <input name="count" type="number" class="form-control" id="stockCount">
                                    <p id="stockerror" class="error-message" style="display: none" ></p>
                                </div>
                            </div>
                        </div>
                        <div class="row d-none">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="brand" class="form-label">Tax:</label>
                                    <select name="tax" class="form-control">
                                        <option value="9">9%</option>
                                        <option value="9">12%</option>
                                        <option value="9">18%</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="brand" class="form-label">Brand:</label>
                                    <select name="brand" class="form-control" id="brand">
                                        <option value="" disabled selected>Select a brand</option>
                                        <% brand.forEach(brand => { %>
                                        <option value="<%=brand.brandName%>"><%=brand.brandName%></option>
                                        <% }); %>
                                    </select> 
                                    <p id="branderror" class="error-message" style="display: none"></p>
                                </div>
                            </div>
                        </div>
                        <!-- <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="brand" class="form-label">Brand:</label>
                                    <input name="brand" type="text" class="form-control" id="brand">
                                    <p id="branderror" class="error-message" style="display: none" ></p>
                                </div>
                            </div>
                        </div> -->
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="brand" class="form-label">Categories:</label>
                                    <select name="category" class="form-control" id="cat">
                                        <% Category.forEach(category => { %>
                                        <option value="<%=category.name%>"><%=category.name%></option>
                                        <% }); %>
                                    </select>
                                    <p id="categoryerror" class="error-message" style="display: none"></p>
                                </div>
                            </div>
                        </div>
                        
                        
                        


                        
                        
                        
                        <!-- <div class="mb-3">
                            <label class="form-label">Colours Available:</label>
                            <input type="text" name="color">
                            <p id="colorerror" class="error-message" style="display: none" ></p>
                        </div>
                         -->
                        <div class="text-end">
                            <button type="submit" class="add-btn">ADD PRODUCT</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://unpkg.com/cropperjs/dist/cropper.min.css" rel="stylesheet"/>
<script src="https://unpkg.com/cropperjs"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Image preview functionality
//         document.getElementById('productImage').addEventListener('change', function(e) {
//             const file = e.target.files[0];
//             if (file) {
//                 const reader = new FileReader();
//                 reader.onload = function(e) {
//                     document.getElementById('imagePreview').style.backgroundImage = `url(${e.target.result})`;
//                     document.getElementById('imagePreview').style.backgroundSize = 'cover';
//                 }
//                 reader.readAsDataURL(file);
//             }
//         });



//         const mess = document.getElementById('message')
//         setTimeout(() => {
//             if(mess){
//                 mess.style.display = 'none'
//             }
//         },3000);


//     const form = document.getElementById('form')
//    const  nameerror = document.getElementById('nameerror')
//    const descriptionerror = document.getElementById('descriptionerror')
//    const branderror = document.getElementById('branderror')
//    const rateerror =  document.getElementById('rateerror')
//    const stockerror = document.getElementById('stockerror')
//    const colorerror = document.getElementById('colorerror')
  

//          form.addEventListener('submit',function(event){
//     console.log('hello')
//     const name =  document.getElementById('nameerror').value
//     const description = document.getElementById('description').value
//     const brand = document.getElementById('branderror')
//    const rate =  document.getElementById('rateerror')
//    const stock = document.getElementById('stockerror')
//    const color= document.getElementById('colorerror')
    
//     if(category.trim() == '' || description.trim() == '' || brand.trim() == '' || rate.trim() == '' || stock.trim() == '' || color.trim() == ''){
//       if(name.trim() == ''){
//       event.preventDefault()
//       document.getElementById('nameerror').innerText = "name field is empty"
      
//       document.getElementById('nameerror').style.display = "block"
      
//     }
//      if(description.trim() == ""){
//       event.preventDefault()
//       document.getElementById('descriptionerror').innerText = "description field is not empty"
//       document.getElementById('descriptionerror').style.display = "block"
//     }
//     if(brand.trim() == ""){
//       event.preventDefault()
//       document.getElementById('branderror').innerText = "brand field is not empty"
//       document.getElementById('branderror').style.display = "block"
//     }
//     if(rate.trim() == ""){
//       event.preventDefault()
//       document.getElementById('rateerror').innerText = "brand field is not empty"
//       document.getElementById('rateerror').style.display = "block"
//     }
//     if(stock.trim() == ""){
//       event.preventDefault()
//       document.getElementById('stockerror').innerText = "brand field is not empty"
//       document.getElementById('stockerror').style.display = "block"
//     }
//     if(color.trim() == ""){
//       event.preventDefault()
//       document.getElementById('colorerror').innerText = "brand field is not empty"
//       document.getElementById('colorerror').style.display = "block"
//     }
    
//         }
   
//     setTimeout(()=>{
//           if(categoryerror.style.display == 'block'){
//             categoryerror.style.display = 'none'
//           }
//           if(descriptionerror.style.display == 'block'){
//             descriptionerror.style.display = 'none'
//           }
//      },3000)
  

//    })

    // Image preview functionality
  
    // document.getElementById('productImage').addEventListener('change', function(e) {
    //     const file = e.target.files[0];
    //     if (file) {
    //         const reader = new FileReader();
    //         reader.onload = function(e) {
    //             document.getElementById('imagePreview').style.backgroundImage = `url(${e.target.result})`;
    //             document.getElementById('imagePreview').style.backgroundSize = 'cover';
    //         };
    //         reader.readAsDataURL(file);
    //     }
    // });
  
                         const imageInput = document.getElementById("productImage");
                        const imagePreview = document.getElementById("imagePreview");
                        const cropModal = document.getElementById("cropModal");
                        const cropperImage = document.getElementById("cropperImage");
                        const cropNextBtn = document.getElementById("cropNextBtn");

                        let cropper;
                        let imageQueue = [];
                        let croppedImages = [];
                        let currentIndex = 0;

                        imageInput.addEventListener("change", (e) => {
                            imageQueue = Array.from(e.target.files);
                            const files = Array.from(e.target.files);
                            const allowedTypes = ["image/jpeg", "image/jpg", "image/png"];
                            const validImages = files.filter(file => allowedTypes.includes(file.type));
                            if (validImages.length !== files.length) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Invalid file type",
                                    text: "Only JPG, JPEG, or PNG images are allowed.",
                                });
                                imageInput.value = ""; 
                                return;
                            }
                            croppedImages = [];
                            currentIndex = 0;
                            if (imageQueue.length > 0) {
                            startCropping(imageQueue[currentIndex]);
                            }
                        });

                        function startCropping(file) {
                            const reader = new FileReader();
                            reader.onload = () => {
                            cropperImage.src = reader.result;
                            cropModal.style.display = "block";

                            // Clean previous cropper if any
                            if (cropper) cropper.destroy();

                            cropper = new Cropper(cropperImage, {
                                aspectRatio: 1,
                                viewMode: 1,
                            });
                            };
                            reader.readAsDataURL(file);
                        }

                        cropNextBtn.addEventListener("click", () => {
                            cropper.getCroppedCanvas().toBlob((blob) => {
                            const croppedFile = new File([blob], `cropped_${Date.now()}.jpg`, { type: "image/jpeg" });
                            croppedImages.push(croppedFile);

                            // Show cropped preview
                            // Show only the last cropped image
                        imagePreview.innerHTML = ''; // Clear existing preview
                        const imgEl = document.createElement("img");
                        imgEl.src = URL.createObjectURL(croppedFile);
                        imgEl.classList.add("img-thumbnail");
                        imgEl.style.width = "179px";
                        imgEl.style.height = "179px";
                        imagePreview.appendChild(imgEl);

                            currentIndex++;
                            if (currentIndex < imageQueue.length) {
                                startCropping(imageQueue[currentIndex]);
                            } else {
                                cropModal.style.display = "none";
                                cropper.destroy();
                            }
                            });
                        });

                       // OPTIONAL: On form submit, replace input with cropped images
                        document.getElementById("form").addEventListener("submit", function (e) {
                            const dataTransfer = new DataTransfer();
                            croppedImages.forEach((file) => dataTransfer.items.add(file));
                            imageInput.files = dataTransfer.files;
                        });

                        // Click image preview to open file dialog
                        imagePreview.addEventListener("click", () => {
                            imageInput.click();
                        });



    const mess = document.getElementById('message');
    setTimeout(() => {
        if (mess) {
            mess.style.display = 'none';
        }
    }, 3000);

    const form = document.getElementById('form');
    const nameerror = document.getElementById('nameerror');
    const descriptionerror = document.getElementById('descriptionerror');
    const branderror = document.getElementById('branderror');
    const rateerror = document.getElementById('rateerror');
    const stockerror = document.getElementById('stockerror');
    // const colorerror = document.getElementById('colorerror');

    form.addEventListener('submit', function(event) {
    event.preventDefault();

    const name = document.getElementById('productName').value.trim();
    const description = document.getElementById('productDescription').value.trim();
    const brand = document.getElementById('brand').value.trim();
    const rate = document.getElementById('productAmount').value.trim();
    const stock = document.getElementById('stockCount').value.trim();
    const category = document.getElementById('cat').value.trim();

    const nameerror = document.getElementById('nameerror');
    const descriptionerror = document.getElementById('descriptionerror');
    const branderror = document.getElementById('branderror');
    const rateerror = document.getElementById('rateerror');
    const stockerror = document.getElementById('stockerror');
    const productregex = /^[a-zA-Z0-9\s\-_,.()]{3,100}$/;
    const descriptionregex = /^[a-zA-Z0-9\s.,:;!?'"()\-]{10,1000}$/;
    const priceRegex = /^(?!0\d)\d+(\.\d{1,2})?$/;
    // Clear previous errors
    nameerror.style.display = "none";
    descriptionerror.style.display = "none";
    branderror.style.display = "none";
    rateerror.style.display = "none";
    stockerror.style.display = "none";
    categoryerror.style.display = "none";
    
    let isValid = true;

    if (name === '') {
        nameerror.innerText = "Name field is empty";
        nameerror.style.display = "block";
        isValid = false;
    }else if (!productregex.test(name)) {
    nameerror.innerText = "Invalid product name (only letters, numbers, spaces, and -_,.() allowed)";
    nameerror.style.display = "block";
    isValid = false;
    }

    if (description === '') {
        descriptionerror.innerText = "Description field is empty";
        descriptionerror.style.display = "block";
        isValid = false;
    }else if (!descriptionregex.test(description)) {
        descriptionerror.innerText = "Invalid description. Use only letters, numbers, and basic punctuation (10–1000 characters).";
        descriptionerror.style.display = "block";
    isValid = false;
     }

    if (brand === '') {
        branderror.innerText = "Brand field is empty";
        branderror.style.display = "block";
        isValid = false;
    }

    if (rate === '') {
        rateerror.innerText = "Rate field is empty";
        rateerror.style.display = "block";
        isValid = false;
    } else if (isNaN(rate) || parseInt(rate) <= 0) {
        rateerror.innerText = "Rate should be a valid number greater than 0";
        rateerror.style.display = "block";
        isValid = false;
    } else if (!priceRegex.test(rate)) {
     rateerror.innerText = "Enter a valid price (e.g. 10 or 10.99)";
    rateerror.style.display = "block";
    isValid = false;
     }

    if (stock === '' || stock < 0) {
        if(stock < 0 ){
        stockerror.innerText = "Stock Must be Greater than zero";
        stockerror.style.display = "block";
        isValid = false;
        }
        else{
         stockerror.innerText = "Stock field is empty";
        stockerror.style.display = "block";
        isValid = false;
        }
    } else if (parseInt(stock) <= 0) {
        stockerror.innerText = "Stock should be above 0";
        stockerror.style.display = "block";
        isValid = false;
    }

    if (category === '') {
        categoryerror.innerText = "Category field is empty";
        categoryerror.style.display = "block";
        isValid = false;
    }

    setTimeout(() => {
        nameerror.style.display = "none";
        descriptionerror.style.display = "none";
        branderror.style.display = "none";
        rateerror.style.display = "none";
        stockerror.style.display = "none";
        categoryerror.style.display = "none";
    }, 3000);

    if (isValid) {
       
        form.submit(); 
    
     }
       
});



 
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

</body>
</html>