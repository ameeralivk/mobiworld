<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin Dashboard</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="\css\admin css\dash.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include("../../views/partials/admin/layout") %>
  
  <div class="modal" id="myModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title text-dark">Modal title</h5>
            </div>
            <div class="modal-body" id="modalBodyContent"></div>
            <div class="modal-footer">
                <button id="okbutton" type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



  <div class="dashboard-container">
    <div class="top-bar">
      <h1 class="page-title">Sales Dashboard</h1>
      <div class="filter-controls">
        <div>
          <span class="filter-label">Time Period:</span>
          <select id="time-filter" onchange="updateCharts()">
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly" selected>Monthly</option>
            <option value="yearly">Yearly</option>
          </select>
        </div>
        <div style="display: none;">
          <span class="filter-label">Year:</span>
          <select id="year-filter" onchange="updateCharts()">
            <option value="2025">2025</option>
            <option value="2024" selected>2024</option>
            <option value="2023">2023</option>
          </select>
        </div>
      </div>
    </div>

    <div class="chart-card big-chart">
      <div class="chart-header">
        <div>
          <h2 class="chart-title">Sales Overview</h2>
          <p class="chart-subtitle">Monthly revenue performance</p>
        </div>
        <div id="sales-total"></div>
      </div>
      <div class="chart-container">
        <canvas id="salesChart"></canvas>
      </div>
     </div>

     <div class="charts-container">
      <div class="chart-card">
        <div class="chart-header">
          <div>
            <h2 class="chart-title">Best Selling Products</h2>
            <p class="chart-subtitle">Top 10 products by units sold</p>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="productsChart"></canvas>
        </div>
      </div>

      <div class="chart-card">
        <div class="chart-header">
          <div>
            <h2 class="chart-title">Best Selling Categories</h2>
            <p class="chart-subtitle">Revenue distribution by category</p>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="categoriesChart"></canvas>
        </div>
        <div class="chart-legend" id="categories-legend"></div>
      </div>

      <div class="chart-card">
        <div class="chart-header">
          <div>
            <h2 class="chart-title">Best Selling Brands</h2>
            <p class="chart-subtitle">Revenue distribution by brand</p>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="brandsChart"></canvas>
        </div>
        <div class="chart-legend" id="brands-legend"></div>
      </div>

      <div class="chart-card">
        <div class="chart-header">
          <div>
            <h2 class="chart-title">Order Status Distribution</h2>
            <p class="chart-subtitle">Current month order statuses</p>
          </div>
        </div>
        <div class="chart-container">
          <canvas id="statusChart"></canvas>
        </div>
        <div class="chart-legend" id="status-legend"></div>
      </div>
    </div>

    <div class="table-container">
      <div class="table-header">
        <div>
          <h2 class="chart-title">Recent Orders</h2>
          <p class="chart-subtitle">Last 10 orders from all channels</p>
        </div>
        <div>
          <select id="orders-filter">
            <option value="all">All Orders</option>
            <option value="delivered">Delivered</option>
            <option value="processing">Processing</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </div>
      <table class="orders-table">
        <thead>
          <tr>
            <th>Order ID</th>
            <th>Customer</th>
            <th>Date</th>
            <th>Amount</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="tbody">
          <tr>
            <td>#ORD-5543</td>
            <td>John Smith</td>
            <td>04 Apr 2025</td>
            <td class="amount">₹329.95</td>
            <td><span class="status-badge status-delivered">Delivered</span></td>
            <td>
              <i class="fas fa-eye action-btn" title="View Details"></i>
              <i class="fas fa-print action-btn" title="Print Invoice"></i>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let salesChart, productsChart, categoriesChart, brandsChart, statusChart;

    const chartColors = [
      '#4361ee', '#3a0ca3', '#7209b7', '#f72585', '#4cc9f0',
      '#ff9e00', '#38b000', '#9d4edd', '#d90429', '#0077b6'
    ];

    // Format currency
        function formatCurrency(amount) {
      return new Intl.NumberFormat('en-IN', {
        style: 'currency',
        currency: 'INR',
        maximumFractionDigits: 2,
      }).format(amount);
    }

    // Format number with commas
    const formatNumber = (value) => {
      return new Intl.NumberFormat('en-US').format(value);
    };

    async function fetchChartData(filter = 'monthly', year = '2024') {
      // In a real app, pass the year parameter to the API
      const res = await fetch(`/admin/dashboard/data/${filter}?year=${year}`);
      const { labels, datasets ,recentOrders } = await res.json();
      return { labels, datasets ,recentOrders };
      console.log(recentOrders,'recentorders')
    }

    function safeDestroy(chart) {
      if (chart && chart.destroy) chart.destroy();
    }
    function renderRecentOrders(recentOrders) {
        console.log('hi')
  const tbody = document.getElementById('tbody')
  tbody.innerHTML = '' // Clear old rows

  recentOrders.forEach(order => {
    const statusClass =
      order.status.toLowerCase() === 'delivered'
        ? 'status-delivered'
        : order.status.toLowerCase() === 'processing'
        ? 'status-processing'
        : 'status-cancelled';

    const row = `
      <tr class="text-dark">
        <td>#${order.orderId}</td>
        <td>${order.customerName}</td>
        <td>${order.createdOn}</td>
        <td class="amount">₹${order.amount.toFixed(2)}</td>
        <td><span class="status-badge ${statusClass}">${order.status}</span></td>
        <td>
          <i class="fas fa-eye action-btn" title="View Details"onclick="showOrderDetailsModal('${order.order}')"></i>
        </td>
      </tr>
    `;
    tbody.insertAdjacentHTML('beforeend', row);
  });
}
 function showOrderDetailsModal(orderid){
  console.log(orderid)
  fetch(`/admin/orderdetails/${orderid}`)
        .then(response => response.json())
        .then(orderDetails => {
            console.log(orderDetails.order, orderDetails.address)
            // Check if we got the correct data
            if (orderDetails) {
                // Get the modal body element by ID
                const modalBody = document.getElementById('modalBodyContent');

                // Build the HTML content for the modal
                let modalContent = `
        <!-- Order Header -->
        <div class="row mb-3">
            <div class="col-8">
                <h5 class="mb-1">Order #ORD-${orderDetails.order.orderId}</h5>
                <p class="text-muted mb-0">Placed on ${new Date(orderDetails.order.createdOn).toLocaleDateString()}</p>
            </div>
            <div class="col-4 text-end">
                <span class="badge ${orderDetails.order.status === 'Shipped' ? 'bg-success' : 'bg-warning'}">${orderDetails.order.status}</span>
            </div>
        </div>

        <!-- Order Items -->
        <div class="row mb-3">
            <div class="col-12">
                <h6 class="mb-2">Order Items</h6>
                
    ${orderDetails.order.orderedItems.map(item => `
    <div class="card mb-2">
        <div class="card-body py-2 bg-dark">
            <div class="row align-items-center">
                <div class="col-2">
                    <img src="${item.product.productImage[0]}" alt="Product" class="img-fluid rounded">
                </div>
                <div class="col-7">
                    <p class="mb-0 fw-bold">${item.product.productName}</p>
                    <small >${item.quantity} x ₹${item.product.salePrice.toLocaleString('en-IN')}</small>
                </div>
                <div class="col-3 text-end">
                    <p class="mb-0 fw-bold">₹${(item.quantity * item.product.salePrice).toLocaleString('en-IN')}</p>
                </div>
            </div>
        </div>
    </div>
`).join('')}

            </div>
        </div>

        <!-- Order Summary -->
        <div class="row mb-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-body bg-dark">
                        <h6 class="mb-2">Order Summary</h6>
                        <div class="d-flex justify-content-between mb-1">
                            <span>Subtotal:</span>
                            <span>₹${orderDetails.order.totalPrice.toLocaleString('en-IN')}</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span>Shipping:</span>
                            <span>₹0</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span>Discount:</span>
                            <span>₹${(orderDetails.order.discount).toLocaleString('en-IN')}</span>
                        </div>
                        <div class="d-flex justify-content-between mb-1">
                            <span>CouponDiscount:</span>
                            <span>₹${(orderDetails.order.couponDiscount).toLocaleString('en-IN')}</span>
                        </div>
                        <hr class="my-2">
                        <div class="d-flex justify-content-between fw-bold">
                            <span>Total:</span>
                            <span>₹${((orderDetails.order.totalPrice-(orderDetails.order.discount+orderDetails.order.couponDiscount))).toLocaleString('en-IN')}</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Shipping Information -->
        <div class="row">
            <div class="col-md-6 mb-2 mb-md-0">
                <div class="card h-100"> 
                    <div class="card-body bg-dark">
                        <h6 class="card-title">Shipping Address</h6>
                        <p class="card-text mb-0">
                            ${orderDetails.order.address[0].name}<br>
                            ${orderDetails.order.address[0].addressType}<br>
                            ${orderDetails.order.address[0].city}, ${orderDetails.order.address[0].state} ${orderDetails.order.address[0].pincode}<br>
                        </p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-body bg-dark">
                        <h6 class="card-title">Payment Method</h6>
                        <p class="card-text mb-1">${orderDetails.order.paymentMethod}</p>
                    </div>
                </div>
            </div>
            ${orderDetails.order.ReturnReason ? `
                        <hr class="text-light">
                        <h6 class="card-title">Return Reason</h6>
                        <p class="card-text text-warning mb-0">${orderDetails.order.ReturnReason}</p>
                        ` : ''}
        </div>
    `;

                // Insert the modal content into the modal body
                modalBody.innerHTML = modalContent;

                // Show the modal
                var myModal = new bootstrap.Modal(document.getElementById("myModal"));
                myModal.show();
            } else {
                // Handle error, if no order details are found
                alert('Order not found');
            }
        })
 }

    function generateLegend(chartId, labels, colors) {
      const legendEl = document.getElementById(`${chartId}-legend`);
      if (!legendEl) return;
      
      legendEl.innerHTML = '';
      labels.forEach((label, index) => {
        const item = document.createElement('div');
        item.className = 'legend-item';
        
        const colorBox = document.createElement('span');
        colorBox.className = 'legend-color';
        colorBox.style.backgroundColor = colors[index % colors.length];
        
        const text = document.createElement('span');
        text.textContent = label;
        
        item.appendChild(colorBox);
        item.appendChild(text);
        legendEl.appendChild(item);
      });
    }

    function updateSalesTotal(data) {
      const totalElement = document.getElementById('sales-total');
      if (!totalElement) return;
      
      const total = data.reduce((acc, val) => acc + val, 0);
      totalElement.innerHTML = `
        <div style="text-align: right">
          <div style="font-size: 14px; color: var(--text-secondary);">Total Sales</div>
          <div style="font-size: 20px; font-weight: 600; color: var(--primary-color)">
            ${formatCurrency(total)}
          </div>
        </div>
      `;
    }

    function renderCharts(labels, data) {
      safeDestroy(salesChart);
      safeDestroy(productsChart);
      safeDestroy(categoriesChart);
      safeDestroy(brandsChart);
      safeDestroy(statusChart);

      // Sales Overview Chart
      // const salesCtx = document.getElementById('salesChart');
      // if (salesCtx) {
      //   updateSalesTotal(data.sales);
        
      //   salesChart = new Chart(salesCtx, {
      //     type: 'bar',
      //     data: {
      //       labels: labels.salesOverview,
      //       datasets: [{
      //         label: 'Revenue',
      //         data: data.sales,
      //         backgroundColor: 'rgba(67, 97, 238, 0.7)',
      //         borderColor: 'rgba(67, 97, 238, 1)',
      //         borderWidth: 1,
      //         borderRadius: 4,
      //         barThickness: 20,
      //         maxBarThickness: 30
      //       }]
      //     },
      //     options: {
      //       responsive: true,
      //       maintainAspectRatio: false,
      //       plugins: {
      //         legend: {
      //           display: false
      //         },
      //         tooltip: {
      //           callbacks: {
      //             label: function(context) {
      //               return formatCurrency(context.raw);
      //             }
      //           }
      //         }
      //       },
      //       scales: {
      //         y: {
      //           beginAtZero: true,
      //           grid: {
      //             drawBorder: false,
      //             color: 'rgba(0, 0, 0, 0.05)'
      //           },
      //           ticks: {
      //             callback: function(value) {
      //               return formatCurrency(value);
      //             }
      //           }
      //         },
      //         x: {
      //           grid: {
      //             display: false
      //           }
      //         }
      //       }
      //     }
      //   });
      // }

      const salesCtx = document.getElementById('salesChart');
                if (salesCtx) {
                  console.log(data)
                    updateSalesTotal(data.sales);

                    salesChart = new Chart(salesCtx, {
                        type: 'line',
                        data: {
                            labels: labels.salesOverview,
                            datasets: [{
                                label: 'Revenue',
                                data: data.sales,
                                fill: false, // no area below the line
                                borderColor: 'rgba(67, 97, 238, 1)',
                                backgroundColor: 'rgba(67, 97, 238, 0.2)',
                                tension: 0.3, // curve of the line, 0 for straight lines
                                pointRadius: 4,
                                pointBackgroundColor: 'rgba(67, 97, 238, 1)',
                                pointBorderColor: '#fff',
                                pointHoverRadius: 6
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            return formatCurrency(context.raw);
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    grid: {
                                        drawBorder: false,
                                        color: 'rgba(0, 0, 0, 0.05)'
                                    },
                                    ticks: {
                                        callback: function (value) {
                                            return formatCurrency(value);
                                        }
                                    }
                                },
                                x: {
                                    grid: {
                                        display: false
                                    }
                                }
                            }
                        }
                    });

                }

      // Best Selling Products Chart
      const productsCtx = document.getElementById('productsChart');
      if (productsCtx) {
        productsChart = new Chart(productsCtx, {
          type: 'bar',
          data: {
            labels: labels.products,
            datasets: [{
              label: 'Units Sold',
              data: data.products,
              backgroundColor: chartColors,
              borderColor: chartColors.map(color => color),
              borderWidth: 1,
              borderRadius: 4
            }]
          },
          options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return `Units Sold: ${formatNumber(context.raw)}`;
                  }
                }
              }
            },
            scales: {
              x: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(0, 0, 0, 0.05)'
                },
                ticks: {
                  callback: function(value) {
                    return formatNumber(value);
                  }
                }
              },
              y: {
                grid: {
                  display: false
                }
              }
            }
          }
        });
      }

      // Categories Chart
      const categoriesCtx = document.getElementById('categoriesChart');
      if (categoriesCtx) {
        categoriesChart = new Chart(categoriesCtx, {
          type: 'pie',
          data: {
            labels: labels.categories,
            datasets: [{
              label: 'Category Sales',
              data: data.categories,
              backgroundColor: chartColors.slice(0, labels.categories.length),
              borderColor: '#ffffff',
              borderWidth: 2
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const value = context.raw;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = Math.round((value / total) * 100);
                    return `${context.label}: ${formatCurrency(value)} (${percentage}%)`;
                  }
                }
              }
            }
          }
        });
        
        // Generate legend
        generateLegend('categories', labels.categories, chartColors);
      }

      // Brands Chart
      const brandsCtx = document.getElementById('brandsChart');
      if (brandsCtx) {
        brandsChart = new Chart(brandsCtx, {
          type: 'doughnut',
          data: {
            labels: labels.brands,
            datasets: [{
              label: 'Brand Sales',
              data: data.brands,
              backgroundColor: chartColors.slice(0, labels.brands.length),
              borderColor: '#ffffff',
              borderWidth: 2
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            cutout: '65%',
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const value = context.raw;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = Math.round((value / total) * 100);
                    return `${context.label}: ${formatCurrency(value)} (${percentage}%)`;
                  }
                }
              }
            }
          }
        });
        
        // Generate legend
        generateLegend('brands', labels.brands, chartColors);
      }

      // Order Status Chart
      const statusCtx = document.getElementById('statusChart');
      if (statusCtx) {
        statusChart = new Chart(statusCtx, {
          type: 'polarArea',
          data: {
            labels: labels.orderStatus,
            datasets: [{
              label: 'Orders',
              data: data.orderStatus,
              backgroundColor: [
                'rgba(40, 167, 69, 0.7)',
                'rgba(255, 193, 7, 0.7)',
                'rgba(220, 53, 69, 0.7)',
                'rgba(108, 117, 125, 0.7)'
              ]
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const value = context.raw;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = Math.round((value / total) * 100);
                    return `${context.label}: ${formatNumber(value)} (${percentage}%)`;
                  }
                }
              }
            },
            scales: {
              r: {
                ticks: {
                  display: false
                }
              }
            }
          }
        });
        
        // Generate legend
        generateLegend('status', labels.orderStatus, [
          '#28a745', '#ffc107', '#dc3545', '#6c757d'
        ]);
      }
    }

    async function updateCharts() {
      const timeFilter = document.getElementById('time-filter').value;
      const yearFilter = document.getElementById('year-filter').value;
      const { labels, datasets ,recentOrders } = await fetchChartData(timeFilter, yearFilter);
      renderCharts(labels, datasets);
      renderRecentOrders(recentOrders);
    }

    document.getElementById('orders-filter').addEventListener('change', function() {
      const filterValue = this.value;
      const rows = document.querySelectorAll('.orders-table tbody tr');
      
      rows.forEach(row => {
        const statusCell = row.querySelector('td:nth-child(5) .status-badge');
        if (!statusCell) return;
        
        const status = statusCell.textContent.toLowerCase();
        
        if (filterValue === 'all' || status === filterValue) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });

    window.addEventListener('DOMContentLoaded', updateCharts);
  </script>
</body>
</html>