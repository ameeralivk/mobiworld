<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="\css\productmainpage.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="\css\shoppage_header.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.17.2/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="\css\shoppage_footer.css">
</head>
<style>
.main-image-container {
    width: 100%;
    margin-bottom: 15px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    position: relative;
    height: 400px;
}
.main-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    cursor: crosshair;
    border: 2px solid black;
    border-radius: 45px;
}
.zoom-lens {
    position: absolute;
    border: 1px solid #d4d4d4;
    width: 200px;
    height: 200px;
    background-repeat: no-repeat;
    display: none;
    pointer-events: none;
    border-radius: 100px;
}

</style>
<body>
    
    <%- include("../../views/partials/user/shoppage_header") %>
    <% if (typeof message !=='undefined' && message) { %>
        <p id="mess" class="error-message">
            <%= message %>
        </p>
        <% } %>

    <div class="container mt-5">
        <div class="row">
            <!-- Product Images Section - Modified Layout -->
            <div class="col-md-6">
                <!-- Main Image Display with Mouse-Follow Zoom -->
                <div class="main-image-container" id="main-image-display">
                    <img src="<%= product.productImage[0] %>" alt="<%= product.productName %>" class="img-fluid main-image" id="main-product-image">
                    <div class="zoom-lens" id="zoom-lens"></div>
                </div>
                
                <!-- Thumbnail Images -->
                <div class="thumbnail-container">
                    <% for(let i=0; i<product.productImage.length && i<3; i++) { %>
                        <div class="thumbnail <%= i === 0 ? 'active' : '' %>" data-index="<%= i %>">
                            <img src="<%= product.productImage[i] %>" alt="<%= product.productName %> view <%= i+1 %>" class="img-fluid">
                        </div>
                    <% } %>
                </div>

                <!-- What's in the Box Section -->
                <div class="row mt-4">
                    <div class="col-12">
                        <h5 class="mb-3">What's in the Box</h5>
                        <!-- Box content section is commented out in original code -->
                    </div>
                </div>
            </div>

            <!-- Product Details Section -->
            <div class="col-md-6">
                <h2 class="mb-2">
                    <%= product.productName %>
                </h2>

                <!-- Price Section -->
                <div class="price-section mb-4">
                    <span class="original-price me-2"></span>
                    <span class="sale-price fw-bold">â‚¹<%= product.salePrice.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %></span>

                </div>
                <% if (allOffers && allOffers.length > 0) { %>
                    <!-- Available Offers Section -->
                    <div class="offer-section p-3 bg-light rounded border shadow-sm">
                      <h5 class="fw-bold text-primary">Available Offers</h5>
                      <ul class="list-group">
                        <% allOffers.forEach((offer) => { %>
                          <li class="list-group-item d-flex justify-content-between align-items-center">
                            <strong><%= offer.name %>:</strong>
                            <% if (offer.discountType === "percentage") { %>
                              <%= offer.discountValue %>% OFF 
                              (Max â‚¹<%= offer.maxDiscount %>)
                            <% } else { %>
                              â‚¹<%= offer.discountValue %> OFF
                            <% } %>
                          </li>
                          <p><%= offer.description %></p>
                        <% }); %>
                      </ul>
                  
                      <!-- Best Offer Message -->
                      <% if (bestOffer) { %>
                        <div class="mt-3 p-3 bg-success text-white rounded text-center fw-bold">
                          ðŸŽ‰ Best Offer Applied: <%= bestOffer.name %> - 
                          <% if (bestOffer.discountType === "percentage") { %>
                            <%= bestOffer.discountValue %>% OFF 
                            <span class="text-warning">
                              (â‚¹<%= ((bestOffer.discountValue / 100) * product.salePrice).toFixed(2) > bestOffer.maxDiscount 
                              ? bestOffer.maxDiscount 
                              : ((bestOffer.discountValue / 100) * product.salePrice).toFixed(2) 
                              %> Discount)
                            </span>
                          <% } else { %>
                            â‚¹<%= bestOffer.discountValue %> OFF
                          <% } %>
                        </div>
                      <% } %>
                    </div>
                  <% } %>
                  

                <!-- Product Information -->
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        About This Product
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <%= product.description %>
                        </li>
                        <li class="list-group-item">Quantity: <%= product.quantity %>
                        </li>
                    </ul>
                </div>
                <button type="button" class="btn" id="stock-button">Checking Stock...</button>
                <!-- Quantity Selector with +/- Buttons -->
                <div id="quantityselect" class="mb-4 mt-3">
                    <label for="quantity" class="form-label">Quantity:</label>
                    <div class="input-group w-25">
                        <button class="btn btn-outline-secondary" type="button" id="quantity-minus">-</button>
                        <input type="number" class="form-control text-center" id="quantity" value="1" min="1" max="5"
                            readonly>
                        <button class="btn btn-outline-secondary" type="button" id="quantity-plus">+</button>
                    </div>
                </div>
                <!-- Action Buttons -->
                <div class="d-grid gap-2 mb-3">
                    <button id="addtocartbutton" data-product-id="<% product._id %>" class="btn btn-info text-white">Add to Cart</button>
                    <button id="wishlistToggleBtn" 
                    data-product-id="<%= product._id %>" 
                    class="btn <%= isWishlisted ? 'btn-danger' : 'btn-outline-danger' %>">
                    <i class="fas fa-heart me-1"></i>
                    <%= isWishlisted ? 'Remove from Wishlist' : 'Add to Wishlist' %>
                  </button>
                  

                    <button id="buynow" class="btn btn-dark">Buy Now</button>
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="currentstock" value="<%= product.quantity %>">
    <!-- Recommended Products Section -->
    <div class="container py-5">
        <h2 class="section-title">Recommended</h2>
        <p class="recommendation-text">If you like this product, you might also like these, as these fall into the same
            category.</p>

        <div class="row g-4">
            <!-- Recommended Products -->
            <% recomended.forEach(function(recomended) { %>
                <div class="col-6 col-md-3">
                    <a href="/user/productmainpage/<%= recomended._id %>"
                        style="text-decoration: none; color: inherit;">
                        <div class="product-card p-3">
                            <div class="recommended-product-image">
                                <img src="<%= recomended.productImage[0] %>" alt="<%= recomended.productName %>"
                                    class="img-fluid no-zoom">
                            </div>
                            <div class="star-rating mt-2">
                                â˜…â˜…â˜…â˜…â˜…
                            </div>
                            <h5 class="product-title mt-2">
                                <%= recomended.productName %>
                            </h5>
                            <p class="price mb-0">â‚¹<%= recomended.salePrice %>
                            </p>
                        </div>
                    </a>
                </div>
                <% }); %>
        </div>
    </div>
    <input type="hidden" id="product-id" value="<%= product._id %>">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.17.2/dist/sweetalert2.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>

        document.getElementById("wishlistToggleBtn").addEventListener("click", async function () {
            const button = this;
            const productId = button.getAttribute("data-product-id");
            console.log("hi")
            try {
                const response = await fetch("/user/toggle-wishlist", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    
                    body: JSON.stringify({ productId }),
                    credentials: "include",
                });

                const result = await response.json();

                if (result.success) {
                    // Update button style and text dynamically
                    if (result.action === 'added') {
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-danger');
                        button.innerHTML = '<i class="fas fa-heart me-1"></i> Remove from Wishlist';
                    } else {
                        button.classList.remove('btn-danger');
                        button.classList.add('btn-outline-danger');
                        button.innerHTML = '<i class="fas fa-heart me-1"></i> Add to Wishlist';
                    }

                    Swal.fire({
                        icon: "success",
                        title: result.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: result.message || "Something went wrong!"
                    });
                }
            } catch (err) {
                console.error("Wishlist Toggle Error:", err);
            }
        });



        document.addEventListener('DOMContentLoaded', function () {
            // Image gallery functionality
            const mainImageContainer = document.getElementById('main-image-display');
            const mainImage = document.getElementById('main-product-image');
            const thumbnails = document.querySelectorAll('.thumbnail');
            const zoomLens = document.getElementById('zoom-lens');
            
            // Initialize with first image
            mainImage.src = thumbnails[0].querySelector('img').src;

            // Mouse-follow zoom functionality
            let zoomActive = false;
            const zoomLevel = 2.5; // Zoom magnification level
            
            function getOffset(el) {
                const rect = el.getBoundingClientRect();
                return {
                    left: rect.left + window.scrollX,
                    top: rect.top + window.scrollY,
                    width: rect.width,
                    height: rect.height
                };
            }

            // Setup zoom lens
            mainImageContainer.addEventListener('mouseenter', function(e) {
                zoomLens.style.display = 'block';
                zoomLens.style.backgroundImage = `url('${mainImage.src}')`;
                zoomLens.style.backgroundSize = `${mainImage.width * zoomLevel}px ${mainImage.height * zoomLevel}px`;
                zoomActive = true;
                updateZoomLens(e);
            });

            mainImageContainer.addEventListener('mouseleave', function() {
                zoomLens.style.display = 'none';
                zoomActive = false;
            });

            mainImageContainer.addEventListener('mousemove', function(e) {
                if (zoomActive) {
                    updateZoomLens(e);
                }
            });

            // Function to update zoom lens position and background position
            function updateZoomLens(e) {
                e.preventDefault();
                
                const containerOffset = getOffset(mainImageContainer);
                let mouseX = e.pageX - containerOffset.left;
                let mouseY = e.pageY - containerOffset.top;
                
                // Calculate lens position
                const lensWidth = zoomLens.offsetWidth;
                const lensHeight = zoomLens.offsetHeight;
                
                // Keep lens within boundaries
                if (mouseX < lensWidth / 2) mouseX = lensWidth / 2;
                if (mouseX > containerOffset.width - lensWidth / 2) mouseX = containerOffset.width - lensWidth / 2;
                if (mouseY < lensHeight / 2) mouseY = lensHeight / 2;
                if (mouseY > containerOffset.height - lensHeight / 2) mouseY = containerOffset.height - lensHeight / 2;
                
                // Position the lens
                zoomLens.style.left = `${mouseX - lensWidth / 2}px`;
                zoomLens.style.top = `${mouseY - lensHeight / 2}px`;
                
                // Calculate background position for the lens
                const bgX = mouseX * zoomLevel - lensWidth / 2;
                const bgY = mouseY * zoomLevel - lensHeight / 2;
                
                zoomLens.style.backgroundPosition = `-${bgX}px -${bgY}px`;
            }

            // Add click event to thumbnails
            thumbnails.forEach(thumbnail => {
                thumbnail.addEventListener('click', function() {
                    // Update main image
                    const imgSrc = this.querySelector('img').src;
                    mainImage.src = imgSrc;
                    
                    // Update zoom lens background
                    if (zoomActive) {
                        zoomLens.style.backgroundImage = `url('${imgSrc}')`;
                        zoomLens.style.backgroundSize = `${mainImage.width * zoomLevel}px ${mainImage.height * zoomLevel}px`;
                    }
                    
                    // Update active state
                    thumbnails.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Quantity selector with +/- buttons
            const quantityInput = document.getElementById('quantity');
            const minusButton = document.getElementById('quantity-minus');
            const plusButton = document.getElementById('quantity-plus');
            const currentStockInput = document.getElementById('currentstock');
            const maxStock = parseInt(currentStockInput.value);

            // Update input value when minus button is clicked
            minusButton.addEventListener('click', function() {
                const currentValue = parseInt(quantityInput.value);
                if (currentValue > 1) {
                    quantityInput.value = currentValue - 1;
                }
            });

            // Update input value when plus button is clicked
            plusButton.addEventListener('click', function() {
                const currentValue = parseInt(quantityInput.value);
                // Make sure we don't exceed available stock or max of 3
                const maxAllowed = Math.min(maxStock,);
                if (currentValue < maxAllowed) {
                    quantityInput.value = currentValue + 1;
                }
            });

            // Stock button functionality
            const stockButton = document.getElementById('stock-button');
            const stock = parseInt(currentStockInput.value);
            
            // Function to update the button dynamically
            function updateStockButton() {
                if (stock > 0) {
                    stockButton.textContent = "In Stock";
                    stockButton.classList.add('btn-success'); // Add "In Stock" style
                    stockButton.classList.remove('btn-danger'); // Remove "Out of Stock" style
                } else {
                    stockButton.textContent = "Out of Stock";
                    stockButton.classList.add('btn-danger'); // Add "Out of Stock" style
                    stockButton.classList.remove('btn-success');
                    document.getElementById('addtocartbutton').disabled = true;
                    document.getElementById('buynow').disabled = true;
                    document.getElementById('quantityselect').style.display = 'none';
                }
            }

            updateStockButton();
        });

        // Add to cart functionality
        document.getElementById('addtocartbutton').addEventListener('click', function() {
            const productId = document.getElementById('product-id').value;
            const quantity = document.getElementById('quantity').value;
            
            function sendtobackend() {
                fetch('/add-to-cart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity }),
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Server Response:', data);
                    if(data.errormessage){
                        Swal.fire({
                        title: 'Alert!',
                        text:data.errormessage ,
                        icon: 'info', // or 'success', 'error', 'warning'
                        confirmButtonText: 'OK'
                    });
                    }
                    else{
                        window.location.href = '/user/getcart';
                    }
                   
                })
                .catch(error => {
                    console.error('Error:', error); // Handle errors
                    alert('Failed to add item to cart.');
                });
            }
            
            sendtobackend();
        });
    </script>

    <%- include("../../views/partials/user/shoppage_footer") %>

</body>
</html>