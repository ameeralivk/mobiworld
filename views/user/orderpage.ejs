<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="\css\shoppage_header.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevateZoom.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.17.2/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="\css\shoppage_footer.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.17.2/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="\css\order.css">
    <link rel="stylesheet" href="\css\profilepage.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>

<body>
    <%- include("../../views/partials/user/shoppage_header") %>
      
    <!-- Return Order Modal -->
<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form method="post" action="/user/returnOrder">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Return Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="orderIdInput" name="orderId">
                <input type="hidden" id="productIdInput" name="productId">
                <p id="para" style="color: red;"></p>
                  
                
                <label for="returnReason" class="form-label">Reason for Return:</label>
                <textarea class="form-control bg-secondary text-white" name="returnReason" id="returnReason" rows="3" placeholder="Enter reason here..."></textarea>
            </div>
            <div class="modal-footer"> 
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger" id="confirmReturn">Confirm Return</button>
            </div>
        </div>
    </form>
    </div>
</div>

        <div class="modal" id="myModal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content bg-dark">
                    <div class="modal-header">
                        <h5 class="modal-title text-dark">Modal title</h5>
                    </div>
                    <div class="modal-body" id="modalBodyContent"></div>
                    <div class="modal-footer">
                        <button id="okbutton" type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="account-header">
            <div class="container">
                <h1>Account</h1>
            </div>
        </div>
        <div class="container mb-5">
            <div class="row">
                <div class="col-md-3">
                    <%- include("../../views/partials/user/sidebar") %>
                </div>

                <div class="col-md-9">
                    <h2 class="page-title">MY ORDERS</h2>

                    <div class="row order-header">
                        <div class="col-3a">Product Id</div>
                        <div class="col-3">Quantity</div>
                        <div class="col-3">Delivery Date</div>
                        <div class="col-3">Status</div>
                    </div>


                    <div id="order-list"></div>
                    <!-- <% orders.forEach(order => { %>
                            <% order.orderedItems.forEach(item => { %>
                              <div id="order-list" class="order-row row align-items-center">
                            
                                <button type="button" class="btn-close" aria-label="Close" onclick="cancelorder('<%= order.orderId %>')"></button>
                          
                                <div class="col-3a">#ORD-<%= order.orderId %></div>
                                <div class="col-3"><%= item.quantity %></div>
                                <div class="col-3">â‚¹<%= order.totalPrice.toLocaleString('en-IN') %></div>
                                <div class="col-3"><%= item.product.productName %></div>
                                <div class="col-2">
                                  <span class="delivered-badge"><%= order.status %></span>
                                </div>
                                <div class="col-1">
                                  <img src="<%= item.product.productImage[0] %>" alt="Product" class="product-image">
                                </div>
                              </div>
                            <% }); %>
                          <% }); %> -->



                    <!-- Pagination Controls -->
                    <div class="d-flex justify-content-center mt-4">
                        <nav aria-label="Orders pagination">
                            <ul class="pagination">
                                <li class="page-item">
                                    <a id="previous" class="page-link" href="javascript:void(0);" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>

                                <!-- Display Current Page -->
                                <li class="page-item">
                                    <span id="current-page" class="page-link">Page 1</span>
                                </li>

                                <li class="page-item">
                                    <a id="next" class="page-link" href="javascript:void(0);" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
        <input type="hidden" id="swal-message" value="<%= message %>" />
        <p><%= message %></p>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.17.2/dist/sweetalert2.all.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                    const messageElement = document.getElementById('swal-message');
                    if (messageElement && messageElement.value) {
                        Swal.fire({
                            icon: 'info',
                            title: 'Notice',
                            text: messageElement.value,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        });
                    }
                });
             function setProductId(checkbox) {
                    const productIdInput = document.getElementById('productIdInput');
                
                }
            function openReturnModal(orderid,productid,itemCount){
                console.log(productid,'productid')
                const returnModal = new bootstrap.Modal(document.getElementById("returnModal"));
                document.getElementById('orderIdInput').value = orderid
                document.getElementById('productIdInput').value = productid;
                const checkbox = document.getElementById('returnCheckbox');
                const paragraph = document.getElementById('para')
                if (itemCount > 1) {
                    paragraph.innerText = "This order contains multiple products.The selected Item will be returned";
                    paragraph.style.display = "block";
                } else {
                    paragraph.style.display = "none"
                }
                returnModal.show();
            }
            let currentPage = 1;
            const itemsPerPage = 5;
            function fetchData(page) {
                console.log('hi')
                fetch(`/pagination/items?page=${page}&limit=${itemsPerPage}`)
                    .then(response => response.json())
                    .then(data => {
                        const orders = data.data;
                        console.log(orders.length)
                        const totalpage = data.totalPages
                        console.log(totalpage, 'totalpage')
                        console.log(currentPage, 'currentapg')
                        const orderList = document.getElementById('order-list');
                        orderList.innerHTML = '';
                        if (currentPage >= totalpage) {
                            document.getElementById('next').style.display = 'none';
                        } else {
                            document.getElementById('next').style.display = 'block'; // Show the "Next" button
                        }
                        if (currentPage == 1) {
                            document.getElementById('previous').style.display = 'none'
                        }
                        else {
                            document.getElementById('previous').style.display = 'block'
                        }
                        
                        orders.forEach(order => {
                            order.orderedItems.forEach(item => {
                                const orderRow = document.createElement('div');
                                orderRow.classList.add('row', 'order-row', 'align-items-center');
                                let downloadBtnHTML = '';
                                let cancell = '';
                                if (order.status === 'Delivered'  && item.returnStatus !== "Requested" && item.returnStatus !== "Returned" && item.returnStatus !== "Rejected" && item.cancelledStatus != "Cancelled") {
                                 downloadBtnHTML = `
                                 <a href="/download-invoice/${order._id}" download class="download-btn">
                                 <span>PDF</span>
                                 <div class="icon"></div>
                                 </a> 
                                  <a href="javascript:void(0);" class="download-btn bg-danger"onclick="openReturnModal('${order._id}','${item.product._id}', ${order.orderedItems.length})">
                                 <span class="bg-danger">Return</span>
                                 </a>
                                 `;
                                 } 
                                let isDisabled = (order.status === "Delivered" || order.status === "Returned" || order.status === "ReturnCancelled" || order.status === "Shipped" || order.status === "Cancelled" || item.cancelledStatus === "Cancelled") ? 'disabled' : '';

                                if (order.status === "Failed") {
                                    cancell = `<button type="button"
                                        class="btn btn-warning btn-sm retry-payment"
                                        onclick="retryPayment('${order._id}')">
                                        Retry Payment
                                    </button>`;
                                } else {
                                    cancell = `<button type="button"
                                        class="btn btn-danger btn-sm"
                                        onclick="cancelorder('${order.orderId}','${item.product._id}')"
                                        ${isDisabled}>
                                        Cancel Order
                                    </button>`;
                                }
                
                                orderRow.innerHTML = `
                                <!-- Close Button -->
                                <div class="col-3a"><a class='text-decoration-none text-dark order-link' href='#'>#ORD-${order.orderId}</a></div> 
                                <div class="col-3">${item.quantity}</div>
                                <div class="col-3">${new Date(order.createdOn).toLocaleString('en-IN')}</div>
                                <div class="col-2">
                                    <span class="delivered-badge">${item.returnStatus || item.cancelledStatus || order.status}</span>
                                </div>
                                <div class="col-1">
                                    <img src="${item.product.productImage[0]}" alt="Product" class="product-image">
                                </div>
                                <div class="col-1 ms-3">
                                   ${downloadBtnHTML}
                                </div>  
                                <div class= "d-flex gap-2">
                                  <button type="button"
                                class="btn btn-outline-primary btn-sm"
                                 onclick="modalopen('${order.orderId}')">
                                <i class="bi bi-chevron-down"></i> Show More
                                 </button>
                                  ${cancell}
                                  </div>
                            `;
                                orderList.appendChild(orderRow);
                            });
                        });
                        updateCurrentPage();
                    })
                    .catch(error => console.log('Error:', error));
            }
            function updateCurrentPage() {
                const currentPageElement = document.getElementById('current-page');
                currentPageElement.textContent = `Page ${currentPage}`;
            }
            fetchData(currentPage);
            document.getElementById('next').addEventListener('click', function (e) {
                e.preventDefault();
                currentPage += 1;
                fetchData(currentPage);
            });
            document.getElementById('previous').addEventListener('click', function (e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage -= 1;
                    fetchData(currentPage);
                }
            });
            // function cancelorder(id, items) {
            //     Swal.fire({
            //         title: 'Are you sure?',
            //         text: 'Do you want to cancel this order?',
            //         icon: 'warning',
            //         showCancelButton: true,
            //         confirmButtonText: 'Yes, cancel it!',
            //         cancelButtonText: 'No, keep it'
            //     }).then((result) => {
            //         if (result.isConfirmed) {
            //             fetch('/admin/cancelorder', {
            //                 method: "POST",
            //                 headers: {
            //                     'Content-Type': 'application/json',

            //                 },
            //                 body: JSON.stringify({ orderId: id, items })
            //             })
            //                 .then(response => response.json())
            //                 .then(data => {
            //                     console.log(data)
            //                     if (data) {
            //                         if(data.message){
                                        
            //                         }
            //                         window.location.href = '/user/order'
            //                     }
            //                 })
            //         }
            //     })


            // }
            // function modalopen(id) {
            //     showOrderModal(id)
            // }
            function cancelorder(id, items) {
                            Swal.fire({
                                title: 'Are you sure?',
                                text: 'Do you want to cancel this order?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes, cancel it!',
                                cancelButtonText: 'No, keep it'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    fetch('/admin/cancelorder', {
                                        method: "POST",
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify({ orderId: id, items })
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        console.log(data);
                                        if (data.message === "Order is already cancelled") {
                                            Swal.fire({
                                                icon: 'info',
                                                title: 'Already Cancelled',
                                                text: 'This order was already cancelled earlier.',
                                                confirmButtonText: 'OK'
                                            });
                                        } else if (data.message === "Selected items cancelled successfully") {
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Cancelled!',
                                                text: 'Selected items cancelled successfully',
                                                showConfirmButton: false,
                                                timer: 1500
                                            }).then(() => {
                                                window.location.href = '/user/order';
                                            });
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Error',
                                                text: data.message || 'Something went wrong while cancelling!',
                                                confirmButtonText: 'OK'
                                            });
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Oops...',
                                            text: 'A server error occurred while cancelling the order.',
                                        });
                                    });
                                }
                            });
                           }

function modalopen(id) {
    showOrderModal(id);
}



            function showOrderModal(orderId) {
                // Fetch the order details from the server
                fetch(`/admin/orderdetails/${orderId}`)
                    .then(response => response.json())
                    .then(orderDetails => {
                        console.log(orderDetails.order,'order', orderDetails.address,'address')
                        // Check if we got the correct data
                        if (orderDetails) {
                            // Get the modal body element by ID
                            const modalBody = document.getElementById('modalBodyContent');
                            const returnedItems = orderDetails.order.orderedItems.filter(item => item.returnStatus === 'Returned');
                            const cancelledItems = orderDetails.order.orderedItems.filter(item => item.cancelledStatus === 'Cancelled');

                            // Build the HTML content for the modal
                            let modalContent = `
                    <!-- Order Header -->
                    <div class="row mb-3">
                        <div class="col-8">
                            <h5 class="mb-1 text-white">Order #ORD-${orderDetails.order.orderId}</h5>
                            <p class="text-white mb-0">Placed on ${new Date(orderDetails.order.createdOn).toLocaleDateString()}</p>
                        </div>
                        <div class="col-4 text-end">
                            <span class="badge ${orderDetails.order.status === 'Shipped' ? 'bg-success' : 'bg-warning'}">${orderDetails.order.status}</span>
                        </div>
                    </div>

                    <!-- Order Items -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <h6 class="mb-2 text-white">Order Items</h6>
                            
                 ${orderDetails.order.orderedItems.map(item => `
                <div class="card mb-2">
                    <div class="card-body py-2 bg-dark">
                        <div class="row align-items-center">
                            <div class="col-2">
                                <img src="${item.product.productImage[0]}" alt="Product" class="img-fluid rounded">
                                <div class="mt-2">
                                    <small class="badge bg-primary">${item.cancelledStatus || item.returnStatus || item.status || orderDetails.order.status || 'Status Unknown'}</small>
                                </div>
                            </div>
                            <div class="col-7">
                                <p class="mb-0 fw-bold text-white">${item.product.productName}</p>
                                <small class="text-white">${item.quantity} x â‚¹${item.price.toLocaleString('en-IN')}</small>
                            </div>
                            <div class="col-3 text-end">
                                <p class="mb-0 fw-bold text-white d-flex">â‚¹${(item.quantity * item.price).toLocaleString('en-IN')}</p>
                            </div>
                        </div>
                    </div>
                </div>
             `).join('')}
        
                        </div>
                    </div>

                    <!-- Order Summary -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body bg-dark">
                                    <h6 class="mb-2">Order Summary</h6>
                                    <div class="d-flex justify-content-between mb-1">
                                        <span class="text-white">Subtotal:</span>
                                        <span class="text-white">â‚¹${orderDetails.order.totalPrice.toLocaleString('en-IN')}</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-1">
                                        <span class="text-white">Shipping:</span>
                                        <span class="text-white">â‚¹0</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-1">
                                        <span class="text-white">Discount:</span>
                                        <span class="text-white">â‚¹${orderDetails.order.discount.toLocaleString('en-IN')}</span>
                                    </div>
                                     <div class="d-flex justify-content-between mb-1">
                                        <span class="text-white">CouponDiscount:</span>
                                        <span class="text-white">â‚¹${orderDetails.order.couponDiscount.toLocaleString('en-IN')}</span>
                                    </div>
                                    <hr class="my-2">
                                    <div class="d-flex justify-content-between fw-bold">
                                        <span class="text-white">Total:</span>
                                        <span class="text-white">â‚¹${((orderDetails.order.totalPrice-(orderDetails.order.discount+orderDetails.order.couponDiscount))).toLocaleString('en-IN')}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                     
                     <!-- Returned Items -->
                ${returnedItems.length >= 1? `
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="card border-danger">
                            <div class="card-body bg-warning">
                                <h6 class="mb-3 text-danger">Returned Items</h6>
                               ${returnedItems.map(item => {
                                const actualPrice = item.price || item.product.salePrice;
                                const offer = item.bestOffer || 0;
                                const subtotal = actualPrice * item.quantity;
                                const afterDiscount = subtotal - (offer * item.quantity);

                                // Check if couponRevoked exists and apply it
                                const couponRevoked = orderDetails.order.couponRevoked || 0;  // Assuming couponRevoked is available in orderDetails

                                // If couponRevoked exists, subtract it from the refund value
                                const finalRefundValue = couponRevoked > 0 ? afterDiscount - couponRevoked : afterDiscount;

                                return `
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <span class="fw-bold">${item.product.productName}</span>
                                        <span>Qty: ${item.quantity}</span>
                                    </div>
                                    <div class="d-flex justify-content-between small">
                                        <span>Price: â‚¹${actualPrice.toLocaleString('en-IN')} x ${item.quantity} = â‚¹${subtotal.toLocaleString('en-IN')}</span>
                                        <span>Discount: â‚¹${(offer * item.quantity).toLocaleString('en-IN')}</span>
                                    </div>
                                    ${couponRevoked > 0 ? `
                                    <div class="d-flex justify-content-between small">
                                        <span>Coupon Revoked:</span>
                                        <span>- â‚¹${couponRevoked.toLocaleString('en-IN')}</span>
                                    </div>` : ''}
                                    <div class="text-end fw-semibold ${couponRevoked > 0 ? 'text-danger' : ''}">
                                        Final Refund Value: â‚¹${finalRefundValue.toLocaleString('en-IN')}
                                    </div>
                                    <hr class="my-2">
                                </div>
                                `;
                            }).join('')}

                            </div>
                        </div>
                    </div>
                </div>
                ` : ''}
                
                 ${cancelledItems.length >=1 ? `
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="card border-danger">
                            <div class="card-body bg-warning">
                                <h6 class="mb-3 text-danger">Cancelled Items</h6>
                               ${cancelledItems.map(item => {
                                const actualPrice = item.price || item.product.salePrice;
                                const offer = item.bestOffer || 0;
                                const subtotal = actualPrice * item.quantity;
                                const afterDiscount = subtotal - (offer * item.quantity);

                                // Check if couponRevoked exists and apply it
                                const couponRevoked = orderDetails.order.couponRevoked || 0;  // Assuming couponRevoked is available in orderDetails

                                // If couponRevoked exists, subtract it from the refund value
                                const finalRefundValue = couponRevoked > 0 ? afterDiscount - couponRevoked : afterDiscount;

                                return `
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <span class="fw-bold">${item.product.productName}</span>
                                        <span>Qty: ${item.quantity}</span>
                                    </div>
                                    <div class="d-flex justify-content-between small">
                                        <span>Price: â‚¹${actualPrice.toLocaleString('en-IN')} x ${item.quantity} = â‚¹${subtotal.toLocaleString('en-IN')}</span>
                                        <span>Discount: â‚¹${(offer * item.quantity).toLocaleString('en-IN')}</span>
                                    </div>
                                    ${couponRevoked > 0 ? `
                                    <div class="d-flex justify-content-between small">
                                        <span>Coupon Revoked:</span>
                                        <span>- â‚¹${couponRevoked.toLocaleString('en-IN')}</span>
                                    </div>` : ''}
                                    <div class="text-end fw-semibold ${couponRevoked > 0 ? 'text-danger' : ''}">
                                        Final Refund Value: â‚¹${finalRefundValue.toLocaleString('en-IN')}
                                    </div>
                                    <hr class="my-2">
                                </div>
                                `;
                            }).join('')}

                            </div>
                        </div>
                    </div>
                </div>
                ` : ''}

                    <!-- Shipping Information -->
                    <div class="row">
                        <div class="col-md-6 mb-2 mb-md-0">
                            <div class="card h-100"> 
                                <div class="card-body bg-dark">
                                    <h6 class="card-title text-white">Shipping Address</h6>
                                    <p class="card-text mb-0 text-white">
                                        ${orderDetails.order.address[0].name}<br>
                                        ${orderDetails.order.address[0].addressType}<br>
                                        ${orderDetails.order.address[0].city}, ${orderDetails.order.address[0].state} ${orderDetails.order.address[0].pincode}<br>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body bg-dark">
                                    <h6 class="card-title text-white">Payment Method</h6>
                                    <p class="card-text mb-1 text-white">${orderDetails.order.paymentMethod}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                            // Insert the modal content into the modal body
                            modalBody.innerHTML = modalContent;

                            // Show the modal
                            var myModal = new bootstrap.Modal(document.getElementById("myModal"));
                            myModal.show();
                        } else {
                            // Handle error, if no order details are found
                            alert('Order not found');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching order details:', error);
                        alert('Something went wrong!');
                    });
            }




            document.querySelectorAll('.order-link').forEach(link => {
                link.addEventListener('click', function () {
                    const orderId = this.getAttribute('data-order-id');
                    showOrderModal(orderId);
                });
            });


            async function retryPayment(orderId) {
                    try {
                        console.log(orderId)
                        const res = await fetch(`/user/retry-payment/${orderId}`);
                        const data = await res.json();

                        if (!data.razorpayOrder) {
                            alert("Retry not possible for this order.");
                            return;
                        }

                        const options = {
                            key: data.secretekey,
                            amount: data.razorpayOrder.amount,
                            currency: "INR",
                            order_id: data.razorpayOrder.id,
                            name: "Your Store",
                            description: "Retry Payment",
                            handler: async function (response) {
                                console.log(response,'response')
                                console.log('hidsafdas')
                                await fetch("/user/retry-verify-payment", {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                    }),
                                });
                                window.location.href = "/user/paymentsuccesspage";
                            },
                            modal: {
                                ondismiss: function () {
                                    window.location.href = "/user/paymentfailedpage";
                                }
                            },
                            theme: { color: "#F37254" }
                        };

                        const rzp = new Razorpay(options);
                        rzp.open();

                    } catch (error) {
                        console.error("Retry Payment Error:", error);
                        alert("Something went wrong during retry.");
                    }
}




        </script>
</body>

</html>